@startuml

interface Tarotable {
    + applyTarot(tarot : Tarot) : void
}

interface TarotApply {
    + apply(score : Score) : void
    + use() : void
    + getName() : String
    + getDescription() : String
    + getTargetType() : Tarotable
}

enum Suit {
    + CLUBS
    + HEARTS
    + SPADES
    + DIAMONDS
    + equalsSuit(Suit suit) : boolean
    + fromString(String suitStr) : Suit
    + getSuitName() : String
}

enum Rank {
    + TWO
    + THREE
    + FOUR
    + FIVE
    + SIX
    + SEVEN
    + EIGHT
    + NINE
    + TEN
    + JACK
    + QUEEN
    + KING
    + ACE
    - value : int
    + Rank(value : int)
    + fromString(rankStr : String) : Rank
    + equalRank(rank : Rank) : boolean
    + getValue() : int
    + getOrdinal() : int
    + continuouns(rank : Rank) : boolean
    + equalsTen() : boolean
    + equalsAs() : boolean
    + isHigherThan(rank : Rank) : boolean
    + isLowerThan(rank : Rank) : boolean
    + getRankName() : String
}

class Score {
    - points : int
    - mult : float
    - addMult : int

    + Score(value : int, mult : int, addMult : int)
    + getTotalPoints() : int
    + applyScore(incomingScore : Score) : void
    + replacePoints(points : int) : void
    + replaceMult(mult : float) : void
    + replaceAddMult(addMult : int) : void
    + increasePoints(points : int) : void
    + increaseMult(mult : float) : void
    + multiplyMult(mult : float) : void
}

class Card implements Tarotable {
    + Card(point : Score, suit : Suit, rank : Rank)
    + continuounsRank(card : Card) : boolean
    + equalsSuit(card : Card) : boolean
    + equalRank(incomingCard : Card) : boolean
    + applyScore(incommingScore : Score) : void
    + getPoints() : Score
    + applyTarot(tarot : Tarot) : void
    + isTen() : boolean
    + isAs() : boolean
    + isHigherThan(card : Card) : boolean
    + getRank() : int
    + getRankName() : String
    + getSuit() : String
}

Card "1" --> "1" Score
Card "1" --> "1" Suit
Card "1" --> "1" Rank
Card .> TarotApply

@enduml